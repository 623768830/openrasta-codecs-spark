<?xml version="1.0"?>
<doc>
  <assembly>
    <name>OpenRasta</name>
  </assembly>
  <members>
    <member name="T:OpenRasta.Binding.IKeyedValuesMediaTypeReader`1">
      <summary>
            Represents a codec that can transform an entity into a set of named values.
            </summary>
      <typeparam name="TValue">The type of the values associated with each key.</typeparam>
    </member>
    <member name="T:OpenRasta.Binding.KeyedValues`1">
      <summary>
            Represent a string key associated with a series of values and a converter, used to match key / values with the keyvalue binder.
            </summary>
      <typeparam name="T">The type of the values.</typeparam>
    </member>
    <member name="T:OpenRasta.Codecs.CodecMatch">
      <summary>
            Represents the result of matching a codec to method parameters.
            </summary>
    </member>
    <member name="T:OpenRasta.Codecs.MediaTypeAttribute">
      <summary>
            Defines the default media types supported by a codec.
            </summary>
    </member>
    <member name="T:OpenRasta.Codecs.HtmlErrorCodec">
      <summary>
            Codec rendering error messages collected during the processing of a request.
            </summary>
    </member>
    <member name="T:OpenRasta.CodeDom.Compiler.MarkupElementModifier">
      <summary>
            Supports IElement elements, and render them as html elements dealing with their own encoding.
            </summary>
    </member>
    <member name="T:OpenRasta.CodeDom.Compiler.UnencodedOutputModifier">
      <summary>
            Supports writing data without conversion to the output stream, whenever they are of type UnencodedOutput.
            </summary>
    </member>
    <member name="T:OpenRasta.Collections.NullBehaviorDictionary`2">
      <summary>
            Provides an implementation of IDictionary&lt;TKey,TValue&gt; that automatically replaces missing values
            with null.
            </summary>
    </member>
    <member name="M:OpenRasta.Configuration.Fluent.ResourcesOfTypeWithoutUri`1.TranscodedBy``1">
      <summary>
            Associates the resource type with a codec.
            </summary>
      <typeparam name="TCodec">The type of codec, implementing ICodec.</typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:OpenRasta.Configuration.Fluent.ResourcesOfTypeAtUri`1.InLanguage(System.String)">
      <summary>
            Defines the language associated with the URI.
            </summary>
      <param name="languageTag">
      </param>
      <returns>
      </returns>
      <remarks> The value of the languageTag parameter value will override content-language negotiation for resources accessed through that URI.</remarks>
    </member>
    <member name="M:OpenRasta.Configuration.Fluent.ResourcesOfTypeAtUri`1.Named(System.String)">
      <summary>
            Gives a name to a specific URI.
            </summary>
      <param name="uriName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:OpenRasta.Configuration.Fluent.ResourcesOfTypeAtUri`1.AndAt(System.String)">
      <summary>
            Adds an additional URI for the resource.
            </summary>
      <param name="uri">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:OpenRasta.Configuration.Fluent.ResourcesOfTypeAtUri`1.HandledBy``1">
      <summary>
            Defines the handler associated with the resource.
            </summary>
      <typeparam name="THandler">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:OpenRasta.Configuration.UsesExtensions.UriDecorator``1(OpenRasta.Configuration.Fluent.IUses)">
      <summary>
            Adds a URI decorator to process incoming URIs.
            </summary>
      <typeparam name="TDecorator">The type of the URI decorator.</typeparam>
      <param name="anchor">
      </param>
    </member>
    <member name="M:OpenRasta.Configuration.UsesExtensions.PipelineContributor``1(OpenRasta.Configuration.Fluent.IUses)">
      <summary>
            Adds a contributor to the pipeline.
            </summary>
      <typeparam name="TPipeline">The type of the pipeline contributor to register.</typeparam>
      <param name="src">
      </param>
    </member>
    <member name="M:OpenRasta.Configuration.HasExtensions.ResourcesOfType``1(OpenRasta.Configuration.Fluent.IHas)">
      <summary>
            Configures a resource type.
            </summary>
      <typeparam name="TResource">The type of the resource.</typeparam>
      <param name="anchor">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:OpenRasta.DI.IDependencyResolverFactory">
      <summary>
            Provides an instance of the dependency resolver to be used with OpenRasta.
            </summary>
    </member>
    <member name="T:OpenRasta.DI.IDependencyRegistrar">
      <summary>
            Provides the initial set of dependencies required to initialize OpenRasta.
            </summary>
    </member>
    <member name="M:OpenRasta.DI.IDependencyRegistrar.Register">
      <summary>
            Registers the default dependencies.
            </summary>
    </member>
    <member name="T:OpenRasta.DI.DependencyManager">
      <summary>
            Provides easy access to common services and dependency-specific properties.
            </summary>
    </member>
    <member name="M:OpenRasta.DI.DependencyManager.SetResolver(OpenRasta.DI.IDependencyResolver)">
      <summary>
            Set-up a new dependency resolver and automatically creates the default dependencies.
            </summary>
      <param name="resolver">An instance of a dependnecy resolver.</param>
      <remarks>If no dependency registrar is registered in the container, the DefaultDependencyRegistrar will be used instead.</remarks>
    </member>
    <member name="M:OpenRasta.DI.DependencyManager.GetService(System.Type)">
      <summary>
            Resolve a component, optionally registering it in the container if AutoRegisterDependencies is set to true.
            </summary>
      <param name="dependencyType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:OpenRasta.DI.DependencyManager.AutoRegisterDependencies">
      <summary>
            Gets or sets a value defining if unregistered dependencies resolved through a call to GetService 
            are automatically registered in the container.
            </summary>
      <remarks>This covers user-specified codecs, handlers and any type provided to the GetService method.
            <c>true</c> by default.</remarks>
    </member>
    <member name="M:OpenRasta.DI.DependencyResolverExtensions.AddDependency``1(OpenRasta.DI.IDependencyResolver)">
      <summary>
            Adds a concrete dependency to the resolver.
            </summary>
      <typeparam name="TConcrete">The concrete type to register.</typeparam>
      <param name="resolver">
      </param>
    </member>
    <member name="M:OpenRasta.DI.DependencyResolverExtensions.AddDependency``1(OpenRasta.DI.IDependencyResolver,OpenRasta.DI.DependencyLifetime)">
      <summary>
            Adds a concrete dependency with the specified lifetime.
            </summary>
      <typeparam name="TConcrete">The concrete type to register.</typeparam>
      <param name="resolver">
      </param>
      <param name="lifetime">The lifetime of the type.</param>
    </member>
    <member name="M:OpenRasta.DI.DependencyResolverExtensions.AddDependency``2(OpenRasta.DI.IDependencyResolver)">
      <summary>
            Adds a dependency of type TService, impelmented by the type TConcrete.
            </summary>
      <typeparam name="TService">The type to register.</typeparam>
      <typeparam name="TConcrete">The type of the concrete implementation.</typeparam>
      <param name="resolver">The resolver.</param>
    </member>
    <member name="M:OpenRasta.DI.DependencyResolverExtensions.AddDependency``2(OpenRasta.DI.IDependencyResolver,OpenRasta.DI.DependencyLifetime)">
      <summary>
            Adds a dependency of type TService, impelmented by the type TConcrete, with the specified dependency lifetime.
            </summary>
      <typeparam name="TService">The type to register.</typeparam>
      <typeparam name="TConcrete">The type of the concrete implementation.</typeparam>
      <param name="resolver">The resolver.</param>
      <param name="lifetime">The lifetime of the type.</param>
    </member>
    <member name="M:OpenRasta.DI.DependencyResolverExtensions.Resolve``1(OpenRasta.DI.IDependencyResolver)">
      <summary>
            Returns an instance of a registered dependency of type T.
            </summary>
      <typeparam name="T">The dependency type.</typeparam>
      <param name="resolver">
      </param>
      <returns>An instance of T.</returns>
      <exception cref="T:OpenRasta.DI.DependencyResolutionException">The resolver couldn't resolve the exception.</exception>
    </member>
    <member name="T:OpenRasta.IO.DeterministicStreamWriter">
      <summary>
            Implements a StreamWriter that does not close or dispose the stream when it doesn't own it.
            </summary>
    </member>
    <member name="M:OpenRasta.IO.DeterministicStreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,OpenRasta.IO.StreamActionOnDispose)">
      <summary>
            Initializes a new instance of the <see cref="T:OpenRasta.IO.DeterministicStreamWriter" /> class.
            </summary>
      <param name="stream">The stream to write to.</param>
      <param name="encoding">The encoding used when writing to the stream.</param>
      <param name="action">The action to take for the stream when the writer is closed.</param>
    </member>
    <member name="T:OpenRasta.IO.LengthTrackingStream">
      <summary>
            Provides a stream that can keep track of how much data was written to a non-seekable stream.
            </summary>
    </member>
    <member name="T:OpenRasta.IO.StreamActionOnDispose">
      <summary>
            Defines what happens to a stream when the user of the stream gets disposed.
            </summary>
    </member>
    <member name="F:OpenRasta.IO.StreamActionOnDispose.Close">
      <summary>
            The stream is closed when the owner is disposed.
            </summary>
    </member>
    <member name="F:OpenRasta.IO.StreamActionOnDispose.None">
      <summary>
            The stream is not closed.
            </summary>
    </member>
    <member name="T:OpenRasta.Reflection.TypeAccessor">
      <summary>
            Build objects
            </summary>
    </member>
    <member name="T:OpenRasta.Reflection.Surrogates.ListIndexerSurrogate`1">
      <summary>
            Provides a surrogate for types implementing IList of T.
            </summary>
    </member>
    <member name="T:OpenRasta.Text.Rfc2047Encoding">
      <summary>
            Provides partial implementation for decoding strings according to RFC2047.
            </summary>
      <remarks>
            This implementation is not yet conformant to rfc2047.
            </remarks>
    </member>
    <member name="T:OpenRasta.Web.Handlers.UriNameHandlerMethodSelector">
      <summary>
            Filters methods by UriName.
            </summary>
      <remarks>
            If no method matching the UriName is found, the system falls back to selecting all methods work.
            </remarks>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.IPElement">
      <summary>
            Represents the P element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.IInlineElement">
      <summary>
            Represents the abbr, acronym, cite, code, dfn, em, kbd, samp, span, strong and var elements.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.IListElement">
      <summary>
            Represents the ul and ol tags
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.IInputCheckedElement">
      <summary>
            Represents the input tags checkbox and radio
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.XhtmlAnchor">
      <summary>
            Marker class used to provide xhtml-related functionality from within pages using extension methods.
            </summary>
    </member>
    <member name="P:OpenRasta.Web.IHttpEntity.Errors">
      <summary>
            Provides access to a list of errors associated with the entity
            </summary>
    </member>
    <member name="M:OpenRasta.IO.BoundaryStreamReader.ReadLine">
      <summary>
            Used only to parse boundaries and headers. ASCII always.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:OpenRasta.IO.HistoryStream">
      <summary>
            Provides a stream over non-seekable streams that buffers all read calls
            and provide a seekable recent history of the stream.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.HttpHeaderDictionary">
      <summary>
            Provides a list of http headers. In dire need of refactoring to use specific header types similar to http digest.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Pipeline.Contributors.HandlerMethodInvoker">
      <summary>
            Parses the content of the request and assign it to the method invocation.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Pipeline.Contributors.RequestEntityReader">
      <summary>
            Parses the content of the request and assign it to the method invocation.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Pipeline.Contributors.InvalidRequestEntityRemover">
      <summary>
            Supports the removal of the request entity when the HTTP verb doesn't allow a body. 
            </summary>
      <remarks>Lo-REST clients that use the http verb override header or the verb URL decorator may send an entity body, either by accident or because of techical constraints (aka Flash cannot add custom http headers without a body). This contributor strips such content before processing.</remarks>
    </member>
    <member name="T:OpenRasta.Web.Pipeline.Contributors.HandlerMethodsUriParamMatcher">
      <summary>
            Matches the URI parameters with the method parameters.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Pipeline.Contributors.HandlerResolver">
      <summary>
            Resolves the handler attached to a resource type.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Pipeline.Contributors.HttpMethodOverrider">
      <summary>
            Supports the use of the X-HTTP-Method-Override header to override the verb used
            by OpenRasta for processing.
            </summary>
      <remarks>Clients that can add http headers may not support other verbs than POST (Flash and Silverlight for example). With the X-HTTP-Method-Override header, OpenRasta will process the request as if it was made using a genuine http verb.</remarks>
    </member>
    <member name="T:OpenRasta.Web.Pipeline.Contributors.RequestEntityCodecResolver">
      <summary>
            Selects which codec can be used to parse the request entity to fullfill
            the parameters to the available handler methods, and selects which method will
            be resolved.
            </summary>
    </member>
    <member name="P:OpenRasta.Web.IRequest.Uri">
      <summary>
            The request Uri
            </summary>
    </member>
    <member name="P:OpenRasta.Web.IRequest.UriName">
      <summary>
            The name associated with the requested URI
            </summary>
    </member>
    <member name="P:OpenRasta.Web.IRequest.NegotiatedCulture">
      <summary>
            The culture in which the resource has been requested by the client.
            </summary>
    </member>
    <member name="P:OpenRasta.Web.IRequest.HttpMethod">
      <summary>
            The HTTP method used.
            </summary>
    </member>
    <member name="F:OpenRasta.Web.Pipeline.PipelineContinuation.Abort">
      <summary>
            An error occured and the pipeline should abort.
            </summary>
      <remarks>Aborting the pipeline will result in the error list 
            being sent back to the client</remarks>
    </member>
    <member name="F:OpenRasta.Web.Pipeline.PipelineContinuation.Finished">
      <summary>
            Processing of the pipeline is complete.
            </summary>
    </member>
    <member name="F:OpenRasta.Web.Pipeline.PipelineContinuation.Continue">
      <summary>
            Continue processing the pipeline.
            </summary>
    </member>
    <member name="T:OpenRasta.Reflection.ParameterInstance">
      <summary>
            Represents an instance of a method parameter.
            </summary>
    </member>
    <member name="P:OpenRasta.Reflection.ParameterInstance.HasAssignedValue">
      <summary>
            The parameter has been assigned a value through its Value property.
            </summary>
    </member>
    <member name="M:OpenRasta.Reflection.ReflectionExtensions.CreateInstanceFrom(System.Type,System.String)">
      <summary>
            Creates a type using the provided string to initialize its values.
            </summary>
      <param name="type">The type of object to create.</param>
      <param name="propertyValue">The value to assign to the created object.</param>
      <returns>The created object.</returns>
    </member>
    <member name="M:OpenRasta.Reflection.ReflectionExtensions.Implements(System.Type,System.Type)">
      <summary>
            Returns true if the type implements the interface.
            </summary>
      <param name="type">
      </param>
      <param name="interfaceType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:OpenRasta.Configuration.Fluent.ResourcesOfTypeAreHandledBy`2.AndTranscodedBy``1">
      <summary>
            Associates the resource type with a codec.
            </summary>
      <typeparam name="TCodec">The type of codec, implementing ICodec.</typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:OpenRasta.Configuration.Fluent.ResourcesOfTypeAreTranscodedBy`2.ForMediaType(OpenRasta.Web.MediaType)">
      <summary>
            Overrides the default media-types for the codec with the provided media type.
            </summary>
    </member>
    <member name="M:OpenRasta.Configuration.Fluent.ResourcesOfTypeAreTranscodedBy`2.ForMediaType(System.String)">
      <summary>
            Overrides the default media-types for the codec with the provided media type.
            </summary>
    </member>
    <member name="M:OpenRasta.Configuration.Fluent.ResourcesOfTypeAreTranscodedBy`2.AndForMediaType(OpenRasta.Web.MediaType)">
      <summary>
            Creates a new media-type association for the resource.
            </summary>
      <param name="mediaType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:OpenRasta.Configuration.Fluent.ResourcesOfTypeAreTranscodedBy`2.AndForMediaType(System.String)">
      <summary>
            Creates a new media-type association for the resource.
            </summary>
      <param name="mediaType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:OpenRasta.Configuration.Fluent.ResourcesOfTypeAreTranscodedBy`2.ForExtensions(System.String[])">
      <summary>
            Overrides the default file extensions for the codec.
            </summary>
    </member>
    <member name="M:OpenRasta.Configuration.Fluent.ResourcesOfTypeAreTranscodedBy`2.AndBy``1">
      <summary>
            Associates the resource type with a codec.
            </summary>
      <typeparam name="TNewCodec">The type of codec, implementing ICodec.</typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:OpenRasta.Configuration.Fluent.ResourcesOfType`1.AtUri(System.String)">
      <summary>
            Defines the URI identifying the resource.
            </summary>
      <param name="uri">A uri template at which the resource will be exposed.</param>
    </member>
    <member name="M:OpenRasta.DI.IDependencyResolver.Resolve(System.Type)">
      <summary>
            Resolves an instance of a type.
            </summary>
      <param name="type">
      </param>
      <returns>An instance of the type.</returns>
    </member>
    <member name="T:OpenRasta.Web.MediaType">
      <summary>
            Represents an internet media-type as defined by RFC 2046.
            </summary>
    </member>
    <member name="M:OpenRasta.Web.MediaType.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:OpenRasta.Web.MediaType" /> class.
            </summary>
      <param name="contentType">A <see cref="T:System.String" />, for example, "text/plain; charset=us-ascii", that contains the internet media type, subtype, and optional parameters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentType" /> is null.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contentType" /> is <see cref="F:System.String.Empty" /> ("").
            </exception>
      <exception cref="T:System.FormatException">
        <paramref name="contentType" /> is in a form that cannot be parsed.
            </exception>
    </member>
    <member name="M:OpenRasta.Web.HttpOperationAttribute.Find(System.Reflection.MethodInfo)">
      <summary>
            Tries to find an HttpOperation attribute on a method. 
            </summary>
      <param name="mi">
      </param>
      <returns>The instance of the HttpOperation attribute, or null if none were defined.</returns>
    </member>
    <member name="M:OpenRasta.Codecs.ICodecRepository.FindMediaTypeReader(OpenRasta.Web.MediaType,System.Collections.Generic.IList{System.Type},System.Collections.Generic.IList{System.Type})">
      <summary>
            Selects the best codec for a given media type and a set of parameters to be resolved.
            </summary>
      <param name="contentType">
      </param>
      <param name="requiredTypes">
      </param>
      <param name="optionalTypes">
      </param>
      <returns>The codec registration and score matching the list of parameters.</returns>
      <remarks>
        <para>The score is calculated as the average distance of the codec to the parameter types.</para>
        <para>For example, if Customer inherits directly from Object, the distance between Object and Customer is 1,and the distance between Customer and itself is 0.</para>
      </remarks>
    </member>
    <member name="T:OpenRasta.Web.OperationResult.Created">
      <summary>
            Represents a "201 Created" response.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.OperationResult.Found">
      <summary>
            Represents a 302 Found response: the requested resource resides temporarily under a different URI.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.OperationResult.MultipleRepresentations">
      <summary>
            Represents a 300 Multiple representations response.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.OperationResult.NoContent">
      <summary>
            Represents a "204 No content" response.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.OperationResult.OK">
      <summary>
            Represents a "200 OK" response.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.OperationResult.RequestMediaTypeUnsupported">
      <summary>
            The request media type (described by the Content-Type header in the request) could not be understood by the server. This will trigger a 415 error code.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.OperationResult.ResponseMediaTypeUnsupported">
      <summary>
            The resource represented by the request could not be returned in any format the client declared supporting through the Accept header.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.OperationResult.SeeOther">
      <summary>
            Represents a 303 See other response: the response to the request can be found under a different URI and SHOULD be retrieved using a GET method on that resource.
            </summary>
    </member>
    <member name="P:OpenRasta.Web.OperationResult.ResponseResource">
      <summary>
            Gets or sets the resource to be returned in the response messsage.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Pipeline.PipelineData">
      <summary>
      </summary>
      <remarks>Need to inherit from a yet to be created SafeDictionary</remarks>
    </member>
    <member name="P:OpenRasta.Web.Pipeline.PipelineData.SelectedResource">
      <summary>
            Provides access to the matched resource registration for a request URI.
            </summary>
    </member>
    <member name="P:OpenRasta.Web.Pipeline.PipelineData.SelectedHandler">
      <summary>
            Gets the instance of the handler that has been selected.
            </summary>
    </member>
    <member name="P:OpenRasta.Web.Pipeline.PipelineData.SelectedHandlerMethods">
      <summary>
            Gets the list of instance methods on a handler that could be used for resolving the request, after the handler method filters have been executed.
            </summary>
    </member>
    <member name="P:OpenRasta.Web.Pipeline.PipelineData.SelectedMethodInvocations">
      <summary>
            Gets the list of handler methods being considered for processing. 
            </summary>
    </member>
    <member name="P:OpenRasta.Web.Pipeline.PipelineData.SelectedMethod">
      <summary>
            Gets the handler method that has been selected. 
            </summary>
    </member>
    <member name="P:OpenRasta.Web.Pipeline.PipelineData.HandlerType">
      <summary>
            Gets the type of the handler selected when matching a request against the registerd resource.
            </summary>
    </member>
    <member name="P:OpenRasta.Web.Pipeline.PipelineData.ResourceType">
      <summary>
            Gets the type of the resource associated with the requestURI. 
            </summary>
    </member>
    <member name="P:OpenRasta.Web.Pipeline.PipelineData.RequestCodec">
      <summary>
            Gets the Codec associated with the request entity.
            </summary>
    </member>
    <member name="P:OpenRasta.Web.Pipeline.PipelineData.ResponseCodec">
      <summary>
            Gets the Codec associated with the response entity.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.UriDecorators.IUriDecorator">
      <summary>
            Defines a decoration on a url, used to modify the context of the request and reshape a url before processing.
            </summary>
    </member>
    <member name="M:OpenRasta.Web.UriDecorators.IUriDecorator.Parse(System.Uri,System.Uri@)">
      <summary>
            Parses a Uri.
            </summary>
      <param name="uri">The uri to process</param>
      <param name="processedUri">The uri after processing</param>
      <returns>true if work needs to be done after the Uri processing is done, resulting in a call to Apply(). Otherwise false.</returns>
    </member>
    <member name="M:OpenRasta.Web.UriDecorators.IUriDecorator.Apply">
      <summary>
            Applies any changes after al the Uri decorators have been called.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.UriDecorators.ContentTypeExtensionUriDecorator">
      <summary>
            Decorates a uri with an extension, similar to a file system extension, to override content-type negociation.
            </summary>
      <remarks>
            The extension is always processed at the end of the uri, and separated by a dot.
            The matching is done per-resource, based on the extension declared for the renderer
            associated with that resource.
            </remarks>
    </member>
    <member name="P:OpenRasta.Configuration.OpenRastaConfiguration.Manual">
      <summary>
            Creates a manual configuration of the resources supported by the application.
            </summary>
    </member>
    <member name="P:OpenRasta.Codecs.CodecRegistration.IsSystem">
      <summary>
            Defines if the codec is to be preserved in configuration because it is part of the
            OpenRasta framework.
            </summary>
    </member>
    <member name="M:OpenRasta.Configuration.WebForms.Extensions.AndRenderedByAspx``2(OpenRasta.Configuration.Fluent.ResourcesOfTypeAreHandledBy{``0,``1},System.String)">
      <summary>
            Adds an html rendering of a resource using an aspx page.
            </summary>
      <typeparam name="TResource">
      </typeparam>
      <typeparam name="TResourceHandler">
      </typeparam>
      <param name="target">
      </param>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:IQ.ExpressionComparer">
      <summary>
            Compare two expressions to determine if they are equivalent
            </summary>
    </member>
    <member name="M:OpenRasta.Reflection.Evaluator.PartialEval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})">
      <summary>
            Performs evaluation and replacement of independent sub-trees
            </summary>
      <param name="expression">The root of the expression tree.</param>
      <param name="fnCanBeEvaluated">A function that decides whether a given expression node can be part of the local function.</param>
      <returns>A new tree with sub-trees evaluated and replaced.</returns>
    </member>
    <member name="M:OpenRasta.Reflection.Evaluator.PartialEval(System.Linq.Expressions.Expression)">
      <summary>
            Performs evaluation and replacement of independent sub-trees
            </summary>
      <param name="expression">The root of the expression tree.</param>
      <returns>A new tree with sub-trees evaluated and replaced.</returns>
    </member>
    <member name="T:OpenRasta.Reflection.SubtreeEvaluator">
      <summary>
            Evaluates and replaces sub-trees when first candidate is reached (top-down)
            </summary>
    </member>
    <member name="T:OpenRasta.Reflection.SubtreeNominator">
      <summary>
            Performs bottom-up analysis to determine which nodes can possibly
            be part of an evaluated sub-tree.
            </summary>
    </member>
  </members>
</doc>